name: Azure Enterprise
trigger:
  batch: true
  branches:
    include:
      - main

schedules:
- cron: "0 7 * * *" # first day at 8am
  displayName: Every day at 8am GMT
  branches:
    include:
    - main
  always: true

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: refs/heads/master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

parameters:
  - name: overrideAction
    type: string
    default: plan
    values:
      - plan
      - apply

  - name: environment_components
    type: object
    default:
      - stage: 'sandbox_enterprise'
        environment: 'sandbox'
        component: 'enterprise'
        service_connection: 'GA-development-tenant'
        init_subscription: '55922b0d-5c33-467f-91b9-42c4059d310c'
        dependsOn: 'Precheck'
        arm_tenant_id: "e575f663-b30a-4786-89ad-319842dfe853"
        arm_client_id: "e31bea8c-d553-4720-b0da-69d45f466e8a" # DTS Operations Bootstrap GA
      - stage: 'prod_enterprise'
        environment: 'prod'
        component: 'enterprise'
        service_connection: 'GA-Prod-Tenant'
        init_subscription: 04d27a32-7a07-48b3-95b8-3c8691e1a263
        # dependsOn: 'sandbox_enterprise'
        arm_tenant_id: "531ff96d-0ae9-462a-8d2d-bec7c0b42082" 
        arm_client_id: "10936009-a112-4733-bb2a-94ee240b79ff" # azure-devops-sp
      - stage: 'prod_video_hearings'
        environment: 'prod'
        component: 'video-hearings'
        service_connection: 'DTS-Video-Hearings-tenant-GA'
        init_subscription: "4b34a614-5deb-4e58-9180-0eaa01ff3dce"
        dependsOn: 'sandbox_enterprise'

variables:
  - name: timeoutInMinutes
    value: 60
  - name: agentPool
    value: ubuntu-latest
  - name: product
    value: enterprise
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries


stages:
  - stage: Precheck
    jobs:
      - job: Precheck
        pool:
          vmImage: ${{ variables.agentPool }}
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-sp-token'
              serviceConnection: 'DCD-CFT-Sandbox'
              overrideAction: ${{ parameters.overrideAction }}

          - bash: |
              wget -O /tmp/yj https://github.com/sclevine/yj/releases/download/v5.1.0/yj-linux-amd64
              chmod +x /tmp/yj
              /tmp/yj -c < environments/prod/prod.tfvars > /tmp/variables.json
            displayName: Convert HCL to JSON
            workingDirectory: $(Pipeline.Workspace)/s/azure-enterprise

          - template: steps/pipeline-tests-jest.yaml@cnp-azuredevops-libraries
            parameters:
              workingDirectory: $(Pipeline.Workspace)/s/azure-enterprise/tests
              junit_output_dir: $(Pipeline.Workspace)/s/azure-enterprise/tests/junit
              environment: prod
              product: ${{ variables.product }}
              test_title: 'Naming conventions'
              test_pattern: namingConventions.test.js
  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.stage }}
        dependsOn: ${{ deployment.dependsOn }}
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            steps:
              - task: AzureKeyVault@2
                displayName: Retrieve keyvault secrets for ADO secret
                inputs:
                  ConnectedServiceName: 'DCD-CFT-Sandbox'
                  keyVaultName: 'infra-vault-nonprod'
                  secretsFilter: 'azure-devops-sp-token, azure-devops-dev-sp'

              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.overrideAction }}
                  environment: ${{ deployment.environment }}
                  component: ${{ deployment.component }}
                  serviceConnection: ${{ deployment.service_connection }}
                  terraformInitSubscription: ${{ deployment.init_subscription }}
                  product: ${{ variables.product }}
                  terraformEnvironmentVariables:
                    ARM_TENANT_ID: ${{ deployment.arm_tenant_id }}
                    ARM_CLIENT_ID: ${{ deployment.arm_client_id }}
                    # Conditional environment variables
                    ${{ if eq(deployment.environment, 'sandbox') }}:
                      ARM_CLIENT_SECRET: $(azure-devops-dev-sp)
                    ${{ if eq(deployment.environment, 'prod') }}:
                      ARM_CLIENT_SECRET: $(azure-devops-dev-sp)
